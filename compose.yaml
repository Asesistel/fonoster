version: "3"

services:

  webui:
    image: fonoster/webui:latest
    ports:
      - 8080:3000
    environment:
      LOGS_LEVEL: ${LOGS_LEVEL}
      WEBUI_APISERVER_ENDPOINT: ${WEBUI_APISERVER_ENDPOINT}
      WEBUI_GITHUB_CLIENT_ID: ${WEBUI_GITHUB_CLIENT_ID}
      WEBUI_GITHUB_CLIENT_SECRET: ${WEBUI_GITHUB_CLIENT_SECRET} 
    logging:
      options:
        tag: fonoster-logs

  apiserver:
    image: fonoster/apiserver:latest
    restart: unless-stopped
    environment:
      LOGS_LEVEL: ${LOGS_LEVEL}
      APISERVER_ROUTR_API_HOST: ${APISERVER_ROUTR_API_HOST}
      APISERVER_ROUTR_API_USERNAME: ${APISERVER_ROUTR_API_USERNAME}
      APISERVER_ROUTR_API_SECRET: ${APISERVER_ROUTR_API_SECRET}
      APISERVER_ROUTR_DEFAULT_PEER_USERNAME: ${APISERVER_ROUTR_DEFAULT_PEER_USERNAME}
      APISERVER_ROUTR_DEFAULT_PEER_SECRET: ${APISERVER_ROUTR_DEFAULT_PEER_SECRET}
      APISERVER_ASTERISK_ARI_URL: ${APISERVER_ASTERISK_ARI_URL}
      APISERVER_ASTERISK_ARI_USERNAME: ${APISERVER_ASTERISK_ARI_USERNAME}
      APISERVER_ASTERISK_ARI_SECRET: ${APISERVER_ASTERISK_ARI_SECRET}
      APISERVER_ASTERISK_RECORDINGS_PATH: ${APISERVER_ASTERISK_RECORDINGS_PATH}
      APISERVER_VAULT_ADDR: ${APISERVER_VAULT_ADDR}
      APISERVER_VAULT_TOKEN: ${APISERVER_VAULT_TOKEN}
      APISERVER_S3_SERVER_HOST: ${APISERVER_S3_SERVER_HOST}
      APISERVER_S3_SERVER_USERNAME: ${APISERVER_S3_SERVER_USERNAME}
      APISERVER_S3_SERVER_SECRET: ${APISERVER_S3_SERVER_SECRET}
      APISERVER_S3_SERVER_USE_SSL: ${APISERVER_S3_SERVER_USE_SSL}
      APISERVER_SMARTVOICE_URL: ${APISERVER_SMARTVOICE_URL}
      APISERVER_JWT_AUTH_ISS: ${APISERVER_JWT_AUTH_ISS}
      APISERVER_JWT_PRIVATE_KEY: ${APISERVER_JWT_PRIVATE_KEY}
      LOGS_AGGREGRATOR_HOST: ${LOGS_AGGREGRATOR_HOST}
    ports:
      - 50052:50052
    logging:
      options:
        tag: fonoster-logs

  routr:
    image: fonoster/routr:1.2.8
    restart: unless-stopped
    platform: linux/x86_64
    environment:
      EXTERN_ADDR: ${DOCKER_HOST_ADDRESS}
      INITIAL_API_SECRET: ${ROUTR_INITIAL_API_SECRET}
      BIND_ADDR: ${ROUTR_BIND_ADDR}
      DATA_SOURCE_PROVIDER: ${ROUTR_DATA_SOURCE_PROVIDER}
      DATA_SOURCE_PARAMETERS: ${ROUTR_DATA_SOURCE_PARAMETERS}
      RECORD_ROUTE: ${ROUTR_RECORD_ROUTE}
      REGISTRAR_INTF: ${ROUTR_REGISTRAR_INTF}
      REST_SERVICE_MIN_THREADS: ${ROUTR_REST_SERVICE_MIN_THREADS}
      REST_SERVICE_MAX_THREADS: ${ROUTR_REST_SERVICE_MAX_THREADS}
      EX_RTP_ENGINE_ENABLED: ${ROUTR_RTPENGINE_ENABLED}
      EX_RTP_ENGINE_PROTO: ${ROUTR_RTPENGINE_PROTO}
      EX_RTP_ENGINE_HOST: ${ROUTR_RTPENGINE_HOST}
      EX_RTP_ENGINE_PORT: ${ROUTR_RTPENGINE_PORT}
      EX_CONVERT_TEL_TO_E164: ${ROUTR_CONVERT_TEL_TO_E164}
      LOGS_DRIVER_HOST: fluent
      LOGS_DRIVER_PORT: 24224
      JAVA_OPTS: ${ROUTR_JAVA_OPTS}
    expose:
      - 4567
    ports:
      - 5060-5063:5060-5063
      - 5060:5060/udp
    logging:
      options:
        tag: fonoster-logs

  # RTPEngine uses a range of ports to handle RTP traffic. Because exposing a large range of ports 
  # is not possible in Docker, we need to use network_mode: host.
  #
  # Unfortunately, network_mode: host is not supported in Docker for Windows or Mac.
  # In those cases, we need to use a different approach.
  #
  # By default we are opening a small range of ports (30000-30100) to handle RTP traffic.
  # However, this is not enough for production environments.
  #
  # We recommend that when using Linux you use network_mode: host and remove the ports section.
  rtpengine:
    image: fonoster/rtpengine:latest
    restart: unless-stopped
    platform: linux/x86_64
    ports: 
      - 10000-10020:10000-10020/udp
      - 8080:8080
    environment:
      PUBLIC_IP: ${DOCKER_HOST_ADDRESS}
      PORT_MIN: 10000
      PORT_MAX: 10020

  asterisk:
    image: fonoster/asterisk:latest
    restart: unless-stopped
    environment:
      EXTERN_ADDR: ${DOCKER_HOST_ADDRESS}
      ARI_USERNAME: ${ASTERISK_ARI_USERNAME}
      ARI_SECRET: ${ASTERISK_ARI_SECRET}
      SIPPROXY_HOST: ${ASTERISK_SIPPROXY_HOST}
      SIPPROXY_USERNAME: ${ASTERISK_SIPPROXY_USERNAME}
      SIPPROXY_SECRET: ${ASTERISK_SIPPROXY_SECRET}
      RTP_PORT_START: ${ASTERISK_RTP_PORT_START}
      RTP_PORT_END: ${ASTERISK_RTP_PORT_END}
    volumes:
      - shared:/home/fonoster
    expose:
      - 8080
    logging:
      options:
        tag: fonoster-logs

  redis:
    image: redis:7.0.8-alpine
    restart: unless-stopped
    expose:
      - 6379
    volumes:
      - shared:/data

  vault:
    image: vault:1.13.3
    container_name: vault
    entrypoint: vault server -config=/vault/config/vault.json   
    volumes:
      - shared:/vault/file:rw
      - ./etc/vault_policy.hcl:/vault/config/vault_policy.hcl:ro
      - ./etc/vault.json:/vault/config/vault.json:ro
    cap_add:
      - IPC_LOCK

  fluent:
    image: fonoster/fluent:latest
    restart: unless-stopped
    platform: linux/x86_64
    expose:
      - 24224
    volumes:
      - ./etc/fluent.conf:/fluentd/etc/fluent.conf:ro

  elasticsearch:
    image: elasticsearch:7.17.15
    restart: unless-stopped
    platform: linux/x86_64
    environment:
      - "discovery.type=single-node"
    expose:
      - 9200
    volumes:
      - shared:/usr/share/elasticsearch/data:rw

  minio:
    image: bitnami/minio:2023.12.9
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${APISERVER_S3_SERVER_USERNAME}
      MINIO_ROOT_PASSWORD: ${APISERVER_S3_SERVER_SECRET}
      MINIO_DEFAULT_BUCKETS: apps:download,recordings:download,public:public
    expose:
      - 9000
    volumes:
      - shared:/bitnami/data/minio:rw

volumes:
  shared:
