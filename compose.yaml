version: "3"

services:

  apiserver:
    image: fonoster/apiserver:latest
    restart: unless-stopped
    environment:
      LOGS_LEVEL: ${LOGS_LEVEL}
      APISERVER_GLOBAL_SIP_DOMAIN: ${APISERVER_GLOBAL_SIP_DOMAIN}
      APISERVER_ROUTR_API_HOST: ${APISERVER_ROUTR_API_HOST}
      APISERVER_ROUTR_API_PORT: ${APISERVER_ROUTR_API_PORT}
      APISERVER_ROUTR_API_USERNAME: ${APISERVER_ROUTR_API_USERNAME}
      APISERVER_ROUTR_API_SECRET: ${APISERVER_ROUTR_API_SECRET}
      APISERVER_MEDIASERVER_SIP_ENDPOINT: ${APISERVER_MEDIASERVER_SIP_ENDPOINT}
      APISERVER_MEDIASERVER_TRUNK: ${APISERVER_MEDIASERVER_TRUNK}
      APISERVER_MEDIASERVER_CONTEXT: ${APISERVER_MEDIASERVER_CONTEXT}
      APISERVER_MEDIASERVER_EXTENSION: ${APISERVER_MEDIASERVER_EXTENSION}
      APISERVER_MEDIASERVER_ARI_INTERNAL_URL: ${APISERVER_MEDIASERVER_ARI_INTERNAL_URL}
      APISERVER_MEDIASERVER_ARI_USERNAME: ${APISERVER_MEDIASERVER_ARI_USERNAME}
      APISERVER_MEDIASERVER_ARI_SECRET: ${APISERVER_MEDIASERVER_ARI_SECRET}
      APISERVER_MEDIASERVER_RECORDINGS_PATH: ${APISERVER_MEDIASERVER_RECORDINGS_PATH}
      APISERVER_VOICE_URL: ${APISERVER_VOICE_URL}
      APISERVER_VAULT_ADDR: ${APISERVER_VAULT_ADDR}
      APISERVER_SECRETS_POLICY: ${APISERVER_SECRETS_POLICY}
      APISERVER_S3_SERVER_HOST: ${APISERVER_S3_SERVER_HOST}
      APISERVER_S3_SERVER_PORT: ${APISERVER_S3_SERVER_PORT}
      APISERVER_S3_SERVER_USERNAME: ${APISERVER_S3_SERVER_USERNAME}
      APISERVER_S3_SERVER_SECRET: ${APISERVER_S3_SERVER_SECRET}
      APISERVER_S3_SERVER_USE_SSL: ${APISERVER_S3_SERVER_USE_SSL}
      APISERVER_LOGS_AGGREGRATOR_HOST: ${APISERVER_LOGS_AGGREGRATOR_HOST}
      APISERVER_LOGS_AGGREGRATOR_PORT: ${APISERVER_LOGS_AGGREGRATOR_PORT}
    ports:
      - 50052:50052

  routr:
    image: fonoster/routr:1.2.8
    restart: unless-stopped
    environment:
      EXTERN_ADDR: ${DOCKER_HOST_ADDRESS}
      INITIAL_API_SECRET: ${ROUTR_INITIAL_API_SECRET}
      BIND_ADDR: ${ROUTR_BIND_ADDR}
      DATA_SOURCE_PROVIDER: ${ROUTR_DATA_SOURCE_PROVIDER}
      DATA_SOURCE_PARAMETERS: ${ROUTR_DATA_SOURCE_PARAMETERS}
      RECORD_ROUTE: ${ROUTR_RECORD_ROUTE}
      REGISTRAR_INTF: ${ROUTR_REGISTRAR_INTF}
      REST_SERVICE_MIN_THREADS: ${ROUTR_REST_SERVICE_MIN_THREADS}
      REST_SERVICE_MAX_THREADS: ${ROUTR_REST_SERVICE_MAX_THREADS}
      EX_RTP_ENGINE_ENABLED: ${ROUTR_RTPENGINE_ENABLED}
      EX_RTP_ENGINE_PROTO: ${ROUTR_RTPENGINE_PROTO}
      EX_RTP_ENGINE_HOST: ${ROUTR_RTPENGINE_HOST}
      EX_RTP_ENGINE_PORT: ${ROUTR_RTPENGINE_PORT}
      EX_CONVERT_TEL_TO_E164: ${ROUTR_CONVERT_TEL_TO_E164}
      LOGS_DRIVER_HOST: ${LOGS_DRIVER_HOST}
      LOGS_DRIVER_PORT: ${LOGS_DRIVER_PORT}
      JAVA_OPTS: ${ROUTR_JAVA_OPTS}
    expose:
      - 4567
    ports:
      - 5060-5063:5060-5063
      - 5060:5060/udp

  # RTPEngine uses a range of ports to handle RTP traffic. Because exposing a large range of ports 
  # is not possible in Docker, we need to use network_mode: host.
  #
  # Unfortunately, network_mode: host is not supported in Docker for Windows or Mac.
  # In those cases, we need to use a different approach.
  #
  # By default we are opening a small range of ports (30000-30100) to handle RTP traffic.
  # However, this is not enough for production environments.
  #
  # We recommend that when using Linux you use network_mode: host and remove the ports section.
  rtpengine:
    image: fonoster/rtpengine:latest
    restart: unless-stopped
    ports: 
      - 10000-10020:10000-10020/udp
    expose:
      - 8080
    environment:
      PUBLIC_IP: ${DOCKER_HOST_ADDRESS}
      PORT_MIN: 10000
      PORT_MAX: 10100

  mediaserver:
    image: fonoster/mediaserver
    restart: unless-stopped
    environment:
      EXTERN_ADDR: ${DOCKER_HOST_ADDRESS}
      GRPC_ALLOW_INSECURE: ${GRPC_ALLOW_INSECURE}
      LOGS_LEVEL: ${LOGS_LEVEL}
      EXTERN_PORT: ${MEDIASERVER_EXTERN_PORT}
      APISERVER_ENDPOINT: ${MEDIASERVER_APISERVER_ENDPOINT}
      ARI_EXTERNAL_URL: ${MEDIASERVER_ARI_EXTERNAL_URL}
      ARI_INTERNAL_URL: ${MEDIASERVER_ARI_INTERNAL_URL}
      ARI_USERNAME: ${MEDIASERVER_ARI_USERNAME}
      ARI_SECRET: ${MEDIASERVER_ARI_SECRET}
      SIPPROXY_HOST: ${MEDIASERVER_SIPPROXY_HOST}
      SIPPROXY_PORT: ${MEDIASERVER_SIPPROXY_PORT}
      SIPPROXY_USERNAME: ${MEDIASERVER_SIPPROXY_USERNAME}
      SIPPROXY_SECRET: ${MEDIASERVER_SIPPROXY_SECRET}
      RTP_PORT_START: ${MEDIASERVER_RTP_PORT_START}
      RTP_PORT_END: ${MEDIASERVER_RTP_PORT_END}
    volumes:
      - shared:/home/fonoster
    expose:
      - 8080

  voice:
    image: fonoster/rox:latest
    restart: unless-stopped
    expose:
      - 80:3000
      - 3001
    environment:
      LOGS_LEVEL: ${LOGS_LEVEL}

  redis:
    image: redis:7.0.8-alpine
    restart: unless-stopped
    expose:
      - 6379
    volumes:
      - shared:/data

volumes:
  shared:
