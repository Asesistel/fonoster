version: "3"

services:

  apiserver:
    image: fonoster/apiserver:latest
    restart: unless-stopped
    environment:
      GLOBAL_SIP_DOMAIN: ${GLOBAL_SIP_DOMAIN} 
      SIPPROXY_HOST: ${DOCKER_HOST_ADDRESS}
      MEDIASERVER_SIP_ENDPOINT: ${MEDIASERVER_SIP_ENDPOINT}
      MEDIASERVER_TRUNK: ${MEDIASERVER_TRUNK}
      MEDIASERVER_CONTEXT: ${MEDIASERVER_CONTEXT}
      MEDIASERVER_EXTENSION: ${MEDIASERVER_EXTENSION}
      MEDIASERVER_ARI_INTERNAL_URL: ${MEDIASERVER_ARI_INTERNAL_URL}
      MEDIASERVER_ARI_USERNAME: ${MEDIASERVER_ARI_USERNAME}
      MEDIASERVER_ARI_SECRET: ${MEDIASERVER_ARI_SECRET}
      MEDIASERVER_RECORDINGS_PATH: ${MEDIASERVER_RECORDINGS_PATH}
      VOICE_URL: ${VOICE_URL}
      VAULT_ADDR: ${VAULT_ADDR}
      SECRETS_POLICY: ${SECRETS_POLICY}
      S3_SERVER_HOST: ${S3_SERVER_HOST}
      S3_SERVER_PORT: ${S3_SERVER_PORT}
      S3_SERVER_USERNAME: ${S3_SERVER_USERNAME}
      S3_SERVER_SECRET: ${S3_SERVER_SECRET}
      LOGS_AGGREGRATOR_HOST: ${LOGS_AGGREGRATOR_HOST}
      LOGS_AGGREGRATOR_PORT: ${LOGS_AGGREGRATOR_PORT}
    ports:
      - 50052:50052

  sipproxy:
    image: fonoster/routr:1.2.8
    restart: unless-stopped
    environment:
      EXTERN_ADDR: ${DOCKER_HOST_ADDRESS}
      DATA_SOURCE_PROVIDER: redis_data_provider
      INITIAL_API_SECRET: ${SIPPROXY_API_SECRET}
      DATA_SOURCE_PARAMETERS: host=${REDIS_HOST},port=${REDIS_PORT},secret=${REDIS_SECRET}
      BIND_ADDR: 0.0.0.0
      RECORD_ROUTE: "true"
      REGISTRAR_INTF: Internal
      EX_RTP_ENGINE_ENABLED: "true"
      EX_RTP_ENGINE_PROTO: http
      EX_RTP_ENGINE_HOST: ${RTPENGINE_HOST}
      EX_RTP_ENGINE_PORT: ${RTPENGINE_PORT}
      # Setting this to true is breaking the routing workflow in Routr
      EX_CONVERT_TEL_TO_E164: "true"
      REST_SERVICE_MIN_THREADS: 8
      REST_SERVICE_MAX_THREADS: 8
      JAVA_OPTS: "-XX:NewRatio=2 -Xmx1200M"
      LOGS_DRIVER_HOST: ${LOGS_DRIVER_HOST}
      LOGS_DRIVER_PORT: ${LOGS_DRIVER_PORT}
    ports:
      - 5060-5063:5060-5063
      - 5060:5060/udp

  # RTPEngine uses a range of ports to handle RTP traffic. Because exposing a large range of ports 
  # is not possible in Docker, we need to use network_mode: host.
  #
  # Unfortunately, network_mode: host is not supported in Docker for Windows or Mac.
  # In those cases, we need to use a different approach.
  #
  # By default we are opening a small range of ports (30000-30100) to handle RTP traffic.
  # However, this is not enough for production environments.
  #
  # We recommend that when using Linux you use network_mode: host and remove the ports section.
  rtpengine:
    image: fonoster/rtpengine:latest
    restart: unless-stopped
    ports: 
      - 10000-10020:10000-10020/udp
    expose:
      - 8080
    environment:
      PUBLIC_IP: ${DOCKER_HOST_ADDRESS}
      PORT_MIN: 10000
      PORT_MAX: 10100

  mediaserver:
    image: fonoster/mediaserver
    restart: unless-stopped
    environment:
      EXTERN_ADDR: ${DOCKER_HOST_ADDRESS}
      EXTERN_PORT: ${MEDIASERVER_EXTERN_PORT}
      LOGS_LEVEL: ${LOGS_LEVEL}
      APISERVER_ENDPOINT: ${APISERVER_ENDPOINT}
      GRPC_ALLOW_INSECURE: ${GRPC_ALLOW_INSECURE}
      ARI_EXTERNAL_URL: ${MEDIASERVER_ARI_EXTERNAL_URL}
      ARI_INTERNAL_URL: ${MEDIASERVER_ARI_INTERNAL_URL}
      ARI_USERNAME: ${MEDIASERVER_ARI_USERNAME}
      ARI_SECRET: ${MEDIASERVER_ARI_SECRET}
      SIPPROXY_HOST: ${DOCKER_HOST_ADDRESS}
      SIPPROXY_PORT: ${MEDIASERVER_SIPPROXY_PORT}
      SIPPROXY_USERNAME: ${MEDIASERVER_SIPPROXY_USERNAME}
      SIPPROXY_SECRET: ${MEDIASERVER_SIPPROXY_SECRET}
      RTP_PORT_START: ${MEDIASERVER_RTP_PORT_START}
      RTP_PORT_END: ${MEDIASERVER_RTP_PORT_END}
    volumes:
      - shared:/home/fonoster
    expose:
      - 8080

  voice:
    image: fonoster/rox:latest
    restart: unless-stopped
    expose:
      - 80:3000
      - 3001
    environment:
      LOGS_LEVEL: ${LOGS_LEVEL}

  redis:
    image: redis:7.0.8-alpine
    restart: unless-stopped
    expose:
      - 6379

volumes:
  shared:
